{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { graphQLResultHasProtocolErrors, PROTOCOL_ERRORS_SYMBOL } from \"../../errors/index.js\";\nimport { Observable } from \"../../utilities/index.js\";\nimport { ApolloLink } from \"../core/index.js\";\nexport function onError(errorHandler) {\n  return new ApolloLink(function (operation, forward) {\n    return new Observable(function (observer) {\n      var sub;\n      var retriedSub;\n      var retriedResult;\n      try {\n        sub = forward(operation).subscribe({\n          next: function (result) {\n            if (result.errors) {\n              retriedResult = errorHandler({\n                graphQLErrors: result.errors,\n                response: result,\n                operation: operation,\n                forward: forward\n              });\n            } else if (graphQLResultHasProtocolErrors(result)) {\n              retriedResult = errorHandler({\n                protocolErrors: result.extensions[PROTOCOL_ERRORS_SYMBOL],\n                response: result,\n                operation: operation,\n                forward: forward\n              });\n            }\n            if (retriedResult) {\n              retriedSub = retriedResult.subscribe({\n                next: observer.next.bind(observer),\n                error: observer.error.bind(observer),\n                complete: observer.complete.bind(observer)\n              });\n              return;\n            }\n            observer.next(result);\n          },\n          error: function (networkError) {\n            retriedResult = errorHandler({\n              operation: operation,\n              networkError: networkError,\n              //Network errors can return GraphQL errors on for example a 403\n              graphQLErrors: networkError && networkError.result && networkError.result.errors || void 0,\n              forward: forward\n            });\n            if (retriedResult) {\n              retriedSub = retriedResult.subscribe({\n                next: observer.next.bind(observer),\n                error: observer.error.bind(observer),\n                complete: observer.complete.bind(observer)\n              });\n              return;\n            }\n            observer.error(networkError);\n          },\n          complete: function () {\n            // disable the previous sub from calling complete on observable\n            // if retry is in flight.\n            if (!retriedResult) {\n              observer.complete.bind(observer)();\n            }\n          }\n        });\n      } catch (e) {\n        errorHandler({\n          networkError: e,\n          operation: operation,\n          forward: forward\n        });\n        observer.error(e);\n      }\n      return function () {\n        if (sub) sub.unsubscribe();\n        if (retriedSub) sub.unsubscribe();\n      };\n    });\n  });\n}\nvar ErrorLink = /** @class */function (_super) {\n  __extends(ErrorLink, _super);\n  function ErrorLink(errorHandler) {\n    var _this = _super.call(this) || this;\n    _this.link = onError(errorHandler);\n    return _this;\n  }\n  ErrorLink.prototype.request = function (operation, forward) {\n    return this.link.request(operation, forward);\n  };\n  return ErrorLink;\n}(ApolloLink);\nexport { ErrorLink };","map":{"version":3,"names":["graphQLResultHasProtocolErrors","PROTOCOL_ERRORS_SYMBOL","Observable","ApolloLink","onError","errorHandler","operation","forward","observer","sub","retriedSub","retriedResult","subscribe","next","result","errors","graphQLErrors","response","protocolErrors","extensions","bind","error","complete","networkError","e","unsubscribe","ErrorLink","_super","__extends","_this","call","link","prototype","request"],"sources":["C:\\Users\\KEITH\\ActualProject\\social-media-frontend\\node_modules\\@apollo\\src\\link\\error\\index.ts"],"sourcesContent":["import type { FormattedExecutionResult, GraphQLFormattedError } from \"graphql\";\n\nimport {\n  graphQLResultHasProtocolErrors,\n  PROTOCOL_ERRORS_SYMBOL,\n} from \"../../errors/index.js\";\nimport type { NetworkError } from \"../../errors/index.js\";\nimport { Observable } from \"../../utilities/index.js\";\nimport type { Operation, FetchResult, NextLink } from \"../core/index.js\";\nimport { ApolloLink } from \"../core/index.js\";\n\nexport interface ErrorResponse {\n  /**\n   * Errors returned in the `errors` property of the GraphQL response.\n   */\n  graphQLErrors?: ReadonlyArray<GraphQLFormattedError>;\n  /**\n   * Errors thrown during a network request. This is usually an error thrown\n   * during a `fetch` call or an error while parsing the response from the\n   * network.\n   */\n  networkError?: NetworkError;\n  /**\n   * Fatal transport-level errors from multipart subscriptions.\n   * See the [multipart subscription protocol](https://www.apollographql.com/docs/graphos/routing/operations/subscriptions/multipart-protocol#message-and-error-format) for more information.\n   */\n  protocolErrors?: ReadonlyArray<GraphQLFormattedError>;\n  response?: FormattedExecutionResult;\n  operation: Operation;\n  forward: NextLink;\n}\n\nexport namespace ErrorLink {\n  /**\n   * Callback to be triggered when an error occurs within the link stack.\n   */\n  export interface ErrorHandler {\n    (error: ErrorResponse): Observable<FetchResult> | void;\n  }\n}\n\n// For backwards compatibility.\nexport import ErrorHandler = ErrorLink.ErrorHandler;\n\nexport function onError(errorHandler: ErrorHandler): ApolloLink {\n  return new ApolloLink((operation, forward) => {\n    return new Observable((observer) => {\n      let sub: any;\n      let retriedSub: any;\n      let retriedResult: any;\n\n      try {\n        sub = forward(operation).subscribe({\n          next: (result) => {\n            if (result.errors) {\n              retriedResult = errorHandler({\n                graphQLErrors: result.errors,\n                response: result,\n                operation,\n                forward,\n              });\n            } else if (graphQLResultHasProtocolErrors(result)) {\n              retriedResult = errorHandler({\n                protocolErrors: result.extensions[PROTOCOL_ERRORS_SYMBOL],\n                response: result,\n                operation,\n                forward,\n              });\n            }\n\n            if (retriedResult) {\n              retriedSub = retriedResult.subscribe({\n                next: observer.next.bind(observer),\n                error: observer.error.bind(observer),\n                complete: observer.complete.bind(observer),\n              });\n              return;\n            }\n\n            observer.next(result);\n          },\n          error: (networkError) => {\n            retriedResult = errorHandler({\n              operation,\n              networkError,\n              //Network errors can return GraphQL errors on for example a 403\n              graphQLErrors:\n                (networkError &&\n                  networkError.result &&\n                  networkError.result.errors) ||\n                void 0,\n              forward,\n            });\n            if (retriedResult) {\n              retriedSub = retriedResult.subscribe({\n                next: observer.next.bind(observer),\n                error: observer.error.bind(observer),\n                complete: observer.complete.bind(observer),\n              });\n              return;\n            }\n            observer.error(networkError);\n          },\n          complete: () => {\n            // disable the previous sub from calling complete on observable\n            // if retry is in flight.\n            if (!retriedResult) {\n              observer.complete.bind(observer)();\n            }\n          },\n        });\n      } catch (e) {\n        errorHandler({ networkError: e as Error, operation, forward });\n        observer.error(e);\n      }\n\n      return () => {\n        if (sub) sub.unsubscribe();\n        if (retriedSub) sub.unsubscribe();\n      };\n    });\n  });\n}\n\nexport class ErrorLink extends ApolloLink {\n  private link: ApolloLink;\n  constructor(errorHandler: ErrorLink.ErrorHandler) {\n    super();\n    this.link = onError(errorHandler);\n  }\n\n  public request(\n    operation: Operation,\n    forward: NextLink\n  ): Observable<FetchResult> | null {\n    return this.link.request(operation, forward);\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}