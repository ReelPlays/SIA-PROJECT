{"ast":null,"code":"import { ApolloClient, InMemoryCache, createHttpLink } from '@apollo/client';\nimport { setContext } from '@apollo/client/link/context';\nimport { onError } from '@apollo/client/link/error';\n\n// Error handling\nconst errorLink = onError(({\n  graphQLErrors,\n  networkError\n}) => {\n  if (graphQLErrors) {\n    graphQLErrors.forEach(({\n      message,\n      locations,\n      path\n    }) => {\n      console.error(`[GraphQL error]: Message: ${message}, Location: ${JSON.stringify(locations)}, Path: ${path}`);\n\n      // Handle authentication errors\n      if (message.includes(\"Unauthorized\") || message.includes(\"invalid token\")) {\n        localStorage.removeItem('token');\n        window.location.href = '/login';\n      }\n\n      // Handle validation errors\n      if (message.includes(\"validation\") || message.includes(\"required\")) {\n        console.warn(`[Validation Error]: ${message}`);\n      }\n    });\n  }\n  if (networkError) {\n    console.error(`[Network error]: ${networkError}`);\n    if (networkError.statusCode === 401) {\n      localStorage.removeItem('token');\n      window.location.href = '/login';\n    }\n  }\n});\n\n// HTTP connection\nconst httpLink = createHttpLink({\n  uri: 'http://localhost:8081/graphql',\n  // User service endpoint\n  credentials: 'include' // Enable sending cookies if needed\n});\n\n// Auth middleware\nconst authLink = setContext((_, {\n  headers\n}) => {\n  const token = localStorage.getItem('token');\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : ''\n    }\n  };\n});\nconst client = new ApolloClient({\n  link: authLink.concat(errorLink).concat(httpLink),\n  cache: new InMemoryCache(),\n  defaultOptions: {\n    watchQuery: {\n      fetchPolicy: 'cache-and-network'\n    },\n    mutate: {\n      errorPolicy: 'all'\n    },\n    query: {\n      errorPolicy: 'all'\n    }\n  }\n});\nexport default client;","map":{"version":3,"names":["ApolloClient","InMemoryCache","createHttpLink","setContext","onError","errorLink","graphQLErrors","networkError","forEach","message","locations","path","console","error","JSON","stringify","includes","localStorage","removeItem","window","location","href","warn","statusCode","httpLink","uri","credentials","authLink","_","headers","token","getItem","authorization","client","link","concat","cache","defaultOptions","watchQuery","fetchPolicy","mutate","errorPolicy","query"],"sources":["C:/Users/KEITH/ActualProject/social-media-frontend/src/apolloClient.js"],"sourcesContent":["import { ApolloClient, InMemoryCache, createHttpLink } from '@apollo/client';\r\nimport { setContext } from '@apollo/client/link/context';\r\nimport { onError } from '@apollo/client/link/error';\r\n\r\n// Error handling\r\nconst errorLink = onError(({ graphQLErrors, networkError }) => {\r\n  if (graphQLErrors) {\r\n    graphQLErrors.forEach(({ message, locations, path }) => {\r\n      console.error(`[GraphQL error]: Message: ${message}, Location: ${JSON.stringify(locations)}, Path: ${path}`);\r\n      \r\n      // Handle authentication errors\r\n      if (message.includes(\"Unauthorized\") || message.includes(\"invalid token\")) {\r\n        localStorage.removeItem('token');\r\n        window.location.href = '/login';\r\n      }\r\n      \r\n      // Handle validation errors\r\n      if (message.includes(\"validation\") || message.includes(\"required\")) {\r\n        console.warn(`[Validation Error]: ${message}`);\r\n      }\r\n    });\r\n  }\r\n  if (networkError) {\r\n    console.error(`[Network error]: ${networkError}`);\r\n    if (networkError.statusCode === 401) {\r\n      localStorage.removeItem('token');\r\n      window.location.href = '/login';\r\n    }\r\n  }\r\n});\r\n\r\n// HTTP connection\r\nconst httpLink = createHttpLink({\r\n  uri: 'http://localhost:8081/graphql', // User service endpoint\r\n  credentials: 'include', // Enable sending cookies if needed\r\n});\r\n\r\n// Auth middleware\r\nconst authLink = setContext((_, { headers }) => {\r\n  const token = localStorage.getItem('token');\r\n  return {\r\n    headers: {\r\n      ...headers,\r\n      authorization: token ? `Bearer ${token}` : '',\r\n    }\r\n  };\r\n});\r\n\r\nconst client = new ApolloClient({\r\n  link: authLink.concat(errorLink).concat(httpLink),\r\n  cache: new InMemoryCache(),\r\n  defaultOptions: {\r\n    watchQuery: {\r\n      fetchPolicy: 'cache-and-network',\r\n    },\r\n    mutate: {\r\n      errorPolicy: 'all'\r\n    },\r\n    query: {\r\n      errorPolicy: 'all'\r\n    }\r\n  }\r\n});\r\n\r\nexport default client;"],"mappings":"AAAA,SAASA,YAAY,EAAEC,aAAa,EAAEC,cAAc,QAAQ,gBAAgB;AAC5E,SAASC,UAAU,QAAQ,6BAA6B;AACxD,SAASC,OAAO,QAAQ,2BAA2B;;AAEnD;AACA,MAAMC,SAAS,GAAGD,OAAO,CAAC,CAAC;EAAEE,aAAa;EAAEC;AAAa,CAAC,KAAK;EAC7D,IAAID,aAAa,EAAE;IACjBA,aAAa,CAACE,OAAO,CAAC,CAAC;MAAEC,OAAO;MAAEC,SAAS;MAAEC;IAAK,CAAC,KAAK;MACtDC,OAAO,CAACC,KAAK,CAAC,6BAA6BJ,OAAO,eAAeK,IAAI,CAACC,SAAS,CAACL,SAAS,CAAC,WAAWC,IAAI,EAAE,CAAC;;MAE5G;MACA,IAAIF,OAAO,CAACO,QAAQ,CAAC,cAAc,CAAC,IAAIP,OAAO,CAACO,QAAQ,CAAC,eAAe,CAAC,EAAE;QACzEC,YAAY,CAACC,UAAU,CAAC,OAAO,CAAC;QAChCC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,QAAQ;MACjC;;MAEA;MACA,IAAIZ,OAAO,CAACO,QAAQ,CAAC,YAAY,CAAC,IAAIP,OAAO,CAACO,QAAQ,CAAC,UAAU,CAAC,EAAE;QAClEJ,OAAO,CAACU,IAAI,CAAC,uBAAuBb,OAAO,EAAE,CAAC;MAChD;IACF,CAAC,CAAC;EACJ;EACA,IAAIF,YAAY,EAAE;IAChBK,OAAO,CAACC,KAAK,CAAC,oBAAoBN,YAAY,EAAE,CAAC;IACjD,IAAIA,YAAY,CAACgB,UAAU,KAAK,GAAG,EAAE;MACnCN,YAAY,CAACC,UAAU,CAAC,OAAO,CAAC;MAChCC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,QAAQ;IACjC;EACF;AACF,CAAC,CAAC;;AAEF;AACA,MAAMG,QAAQ,GAAGtB,cAAc,CAAC;EAC9BuB,GAAG,EAAE,+BAA+B;EAAE;EACtCC,WAAW,EAAE,SAAS,CAAE;AAC1B,CAAC,CAAC;;AAEF;AACA,MAAMC,QAAQ,GAAGxB,UAAU,CAAC,CAACyB,CAAC,EAAE;EAAEC;AAAQ,CAAC,KAAK;EAC9C,MAAMC,KAAK,GAAGb,YAAY,CAACc,OAAO,CAAC,OAAO,CAAC;EAC3C,OAAO;IACLF,OAAO,EAAE;MACP,GAAGA,OAAO;MACVG,aAAa,EAAEF,KAAK,GAAG,UAAUA,KAAK,EAAE,GAAG;IAC7C;EACF,CAAC;AACH,CAAC,CAAC;AAEF,MAAMG,MAAM,GAAG,IAAIjC,YAAY,CAAC;EAC9BkC,IAAI,EAAEP,QAAQ,CAACQ,MAAM,CAAC9B,SAAS,CAAC,CAAC8B,MAAM,CAACX,QAAQ,CAAC;EACjDY,KAAK,EAAE,IAAInC,aAAa,CAAC,CAAC;EAC1BoC,cAAc,EAAE;IACdC,UAAU,EAAE;MACVC,WAAW,EAAE;IACf,CAAC;IACDC,MAAM,EAAE;MACNC,WAAW,EAAE;IACf,CAAC;IACDC,KAAK,EAAE;MACLD,WAAW,EAAE;IACf;EACF;AACF,CAAC,CAAC;AAEF,eAAeR,MAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}